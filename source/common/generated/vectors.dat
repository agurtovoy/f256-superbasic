;
;	This is automatically generated.
;
VectorSetPunc:
	.word	ShiftLeft                        ; $08 <<
	.word	BinaryCompareLessEqual           ; $09 <=
	.word	BinaryCompareNotEqual            ; $0a <>
	.word	SyntaxError                      ; $0b RESERVED_x0B
	.word	SyntaxError                      ; $0c ><
	.word	BinaryCompareGreaterEqual        ; $0d >=
	.word	ShiftRight                       ; $0e >>
	.word	SyntaxError                      ; $0f RESERVED_x0F
	.word	SyntaxError                      ; $10 @
	.word	SyntaxError                      ; $11 RESERVED_x11
	.word	SyntaxError                      ; $12 RESERVED_x12
	.word	SyntaxError                      ; $13 [
	.word	IntegerDivide                    ; $14 \
	.word	SyntaxError                      ; $15 ]
	.word	EorInteger                       ; $16 ^
	.word	SyntaxError                      ; $17 _
	.word	SyntaxError                      ; $18 `
	.word	SyntaxError                      ; $19 RESERVED_x19
	.word	SyntaxError                      ; $1a RESERVED_x1A
	.word	SyntaxError                      ; $1b {
	.word	OraInteger                       ; $1c |
	.word	SyntaxError                      ; $1d }
	.word	SyntaxError                      ; $1e ~
	.word	SyntaxError                      ; $1f RESERVED_x1F
	.word	SyntaxError                      ; $20 RESERVED_x20
	.word	WordIndirect                     ; $21 !
	.word	SyntaxError                      ; $22 "
	.word	SyntaxError                      ; $23 #
	.word	SyntaxError                      ; $24 $
	.word	IntegerModulus                   ; $25 %
	.word	AndInteger                       ; $26 &
	.word	SyntaxError                      ; $27 '
	.word	SyntaxError                      ; $28 (
	.word	SyntaxError                      ; $29 )
	.word	MulInteger                       ; $2a *
	.word	AddInteger                       ; $2b +
	.word	SyntaxError                      ; $2c ,
	.word	SubInteger                       ; $2d -
	.word	SyntaxError                      ; $2e .
	.word	FDivideCommand                   ; $2f /
	.word	SyntaxError                      ; $30 RESERVED_x30
	.word	SyntaxError                      ; $31 RESERVED_x31
	.word	SyntaxError                      ; $32 RESERVED_x32
	.word	SyntaxError                      ; $33 RESERVED_x33
	.word	SyntaxError                      ; $34 RESERVED_x34
	.word	SyntaxError                      ; $35 RESERVED_x35
	.word	SyntaxError                      ; $36 RESERVED_x36
	.word	SyntaxError                      ; $37 RESERVED_x37
	.word	SyntaxError                      ; $38 RESERVED_x38
	.word	SyntaxError                      ; $39 RESERVED_x39
	.word	SyntaxError                      ; $3a :
	.word	SyntaxError                      ; $3b ;
	.word	BinaryCompareLess                ; $3c <
	.word	BinaryCompareEqual               ; $3d =
	.word	BinaryCompareGreater             ; $3e >
	.word	ByteIndirect                     ; $3f ?
VectorSet0:
	.word	AbsUnary                         ; $80 ABS
	.word	AllocUnary                       ; $81 ALLOC
	.word	AscUnary                         ; $82 ASC
	.word	ChrUnary                         ; $83 CHR$
	.word	UnaryEvent                       ; $84 EVENT
	.word	UnaryFalse                       ; $85 FALSE
	.word	FracUnary                        ; $86 FRAC
	.word	AscGet                           ; $87 GET
	.word	ChrGet                           ; $88 GET$
	.word	UnaryGetDate                     ; $89 GETDATE$
	.word	UnaryGetTime                     ; $8a GETTIME$
	.word	UnaryHit                         ; $8b HIT
	.word	AscInkey                         ; $8c INKEY
	.word	ChrInkey                         ; $8d INKEY$
	.word	IntUnary                         ; $8e INT
	.word	IsValUnary                       ; $8f ISVAL
	.word	ItemCountUnary                   ; $90 ITEMCOUNT
	.word	ItemGetUnary                     ; $91 ITEMGET$
	.word	UnaryJoyB                        ; $92 JOYB
	.word	UnaryJoyX                        ; $93 JOYX
	.word	UnaryJoyY                        ; $94 JOYY
	.word	KeyDown                          ; $95 KEYDOWN
	.word	Unary_Left                       ; $96 LEFT$
	.word	LenUnary                         ; $97 LEN
	.word	Unary_Max                        ; $98 MAX
	.word	Unary_Mid                        ; $99 MID$
	.word	Unary_Min                        ; $9a MIN
	.word	Unary_Not                        ; $9b NOT
	.word	PeekByteUnary                    ; $9c PEEK
	.word	PeekDUnary                       ; $9d PEEKD
	.word	PeekLUnary                       ; $9e PEEKL
	.word	PeekWUnary                       ; $9f PEEKW
	.word	UnaryPlaying                     ; $a0 PLAYING
	.word	Unary_Random                     ; $a1 RANDOM
	.word	Unary_Right                      ; $a2 RIGHT$
	.word	Unary_Rnd                        ; $a3 RND
	.word	SgnUnary                         ; $a4 SGN
	.word	SpcUnary                         ; $a5 SPC
	.word	Unary_Str                        ; $a6 STR$
	.word	UnaryTimer                       ; $a7 TIMER
	.word	UnaryTrue                        ; $a8 TRUE
	.word	ValUnary                         ; $a9 VAL
	.word	ForCommand                       ; $aa FOR
	.word	IfCommand                        ; $ab IF
	.word	Unused1                          ; $ac PROC
	.word	Command_REPEAT                   ; $ad REPEAT
	.word	Command_WHILE                    ; $ae WHILE
	.word	SyntaxError                      ; $af ENDIF
	.word	Command_ENDPROC                  ; $b0 ENDPROC
	.word	NextCommand                      ; $b1 NEXT
	.word	Unused4                          ; $b2 THEN
	.word	Command_UNTIL                    ; $b3 UNTIL
	.word	Command_WEND                     ; $b4 WEND
	.word	SyntaxError                      ; $b5 AT
	.word	SyntaxError                      ; $b6 BY
	.word	CallCommand                      ; $b7 CALL
	.word	CircleCommand                    ; $b8 CIRCLE
	.word	SyntaxError                      ; $b9 CLEAR
	.word	SyntaxError                      ; $ba COLOR
	.word	SyntaxError                      ; $bb COLOUR
	.word	Command_Data                     ; $bc DATA
	.word	DimCommand                       ; $bd DIM
	.word	Unused3                          ; $be DOWNTO
	.word	ElseCode                         ; $bf ELSE
	.word	SyntaxError                      ; $c0 FROM
	.word	GfxCommand                       ; $c1 GFX
	.word	SyntaxError                      ; $c2 HERE
	.word	ImageCommand                     ; $c3 IMAGE
	.word	LetCommand                       ; $c4 LET
	.word	LineCommand                      ; $c5 LINE
	.word	Command_LOCAL                    ; $c6 LOCAL
	.word	MCCommand                        ; $c7 MEMCOPY
	.word	SyntaxError                      ; $c8 OFF
	.word	SyntaxError                      ; $c9 ON
	.word	SyntaxError                      ; $ca OUTLINE
	.word	PaletteCommand                   ; $cb PALETTE
	.word	PlotCommand                      ; $cc PLOT
	.word	PokeBCommand                     ; $cd POKE
	.word	PokeDCommand                     ; $ce POKED
	.word	PokeLCommand                     ; $cf POKEL
	.word	PokeWCommand                     ; $d0 POKEW
	.word	Command_Read                     ; $d1 READ
	.word	RectangleCommand                 ; $d2 RECT
	.word	RemCommand                       ; $d3 REM
	.word	SyntaxError                      ; $d4 SOLID
	.word	SoundCommand                     ; $d5 SOUND
	.word	SpriteCommand                    ; $d6 SPRITE
	.word	TabUnary                         ; $d7 TAB
	.word	TextCommand                      ; $d8 TEXT
	.word	Unused2                          ; $d9 TO
	.word	SyntaxError                      ; $da RESERVED_xDA
	.word	SyntaxError                      ; $db RESERVED_xDB
	.word	SyntaxError                      ; $dc RESERVED_xDC
	.word	SyntaxError                      ; $dd RESERVED_xDD
	.word	SyntaxError                      ; $de RESERVED_xDE
	.word	SyntaxError                      ; $df RESERVED_xDF
	.word	SyntaxError                      ; $e0 RESERVED_xE0
	.word	SyntaxError                      ; $e1 RESERVED_xE1
	.word	SyntaxError                      ; $e2 RESERVED_xE2
	.word	SyntaxError                      ; $e3 RESERVED_xE3
	.word	SyntaxError                      ; $e4 RESERVED_xE4
	.word	SyntaxError                      ; $e5 RESERVED_xE5
	.word	SyntaxError                      ; $e6 RESERVED_xE6
	.word	SyntaxError                      ; $e7 RESERVED_xE7
	.word	SyntaxError                      ; $e8 RESERVED_xE8
	.word	SyntaxError                      ; $e9 RESERVED_xE9
	.word	SyntaxError                      ; $ea RESERVED_xEA
	.word	SyntaxError                      ; $eb RESERVED_xEB
	.word	SyntaxError                      ; $ec RESERVED_xEC
	.word	SyntaxError                      ; $ed RESERVED_xED
	.word	SyntaxError                      ; $ee RESERVED_xEE
	.word	SyntaxError                      ; $ef RESERVED_xEF
VectorSet1:
	.word	AssembleCommand                  ; $80 ASSEMBLE
	.word	AssertCommand                    ; $81 ASSERT
	.word	BitmapCtrl                       ; $82 BITMAP
	.word	Command_BLoad                    ; $83 BLOAD
	.word	Command_BSave                    ; $84 BSAVE
	.word	ClearScreen                      ; $85 CLS
	.word	Command_CPrint                   ; $86 CPRINT
	.word	CursorControl                    ; $87 CURSOR
	.word	Command_Dir                      ; $88 DIR
	.word	Command_Drive                    ; $89 DRIVE
	.word	EndCommand                       ; $8a END
	.word	Explode                          ; $8b EXPLODE
	.word	SyntaxError                      ; $8c GO
	.word	Command_GOSUB                    ; $8d GOSUB
	.word	GotoCommand                      ; $8e GOTO
	.word	SyntaxError                      ; $8f HIMEM
	.word	Command_Input                    ; $90 INPUT
	.word	Command_List                     ; $91 LIST
	.word	Command_Load                     ; $92 LOAD
	.word	MouseDeltaStatus                 ; $93 MDELTA
	.word	MouseStatus                      ; $94 MOUSE
	.word	NewCommand                       ; $95 NEW
	.word	OptionCommand                    ; $96 OPTION
	.word	PingCommand                      ; $97 PING
	.word	Command_Print                    ; $98 PRINT
	.word	Command_Restore                  ; $99 RESTORE
	.word	Command_RETURN                   ; $9a RETURN
	.word	CommandRUNOptLoad                ; $9b RUN
	.word	Command_Save                     ; $9c SAVE
	.word	CommandSetDate                   ; $9d SETDATE
	.word	CommandSetTime                   ; $9e SETTIME
	.word	ShootCommand                     ; $9f SHOOT
	.word	SpritesCtrl                      ; $a0 SPRITES
	.word	StopCommand                      ; $a1 STOP
	.word	TileCommand                      ; $a2 TILE
	.word	TilesCtrl                        ; $a3 TILES
	.word	Command_Try                      ; $a4 TRY
	.word	Command_VERIFY                   ; $a5 VERIFY
	.word	XGoCommand                       ; $a6 XGO
	.word	XLoadCommand                     ; $a7 XLOAD
	.word	ZapCommand                       ; $a8 ZAP
VectorSet2:
	.word	Assemble_adc                     ; $80 ADC
	.word	Assemble_and                     ; $81 AND
	.word	Assemble_asl                     ; $82 ASL
	.word	Assemble_bcc                     ; $83 BCC
	.word	Assemble_bcs                     ; $84 BCS
	.word	Assemble_beq                     ; $85 BEQ
	.word	Assemble_bit                     ; $86 BIT
	.word	Assemble_bmi                     ; $87 BMI
	.word	Assemble_bne                     ; $88 BNE
	.word	Assemble_bpl                     ; $89 BPL
	.word	Assemble_bra                     ; $8a BRA
	.word	Assemble_brk                     ; $8b BRK
	.word	Assemble_bvc                     ; $8c BVC
	.word	Assemble_bvs                     ; $8d BVS
	.word	Assemble_clc                     ; $8e CLC
	.word	Assemble_cld                     ; $8f CLD
	.word	Assemble_cli                     ; $90 CLI
	.word	Assemble_clv                     ; $91 CLV
	.word	Assemble_cmp                     ; $92 CMP
	.word	Assemble_cpx                     ; $93 CPX
	.word	Assemble_cpy                     ; $94 CPY
	.word	Assemble_dec                     ; $95 DEC
	.word	Assemble_dex                     ; $96 DEX
	.word	Assemble_dey                     ; $97 DEY
	.word	Assemble_eor                     ; $98 EOR
	.word	Assemble_inc                     ; $99 INC
	.word	Assemble_inx                     ; $9a INX
	.word	Assemble_iny                     ; $9b INY
	.word	Assemble_jmp                     ; $9c JMP
	.word	Assemble_jsr                     ; $9d JSR
	.word	Assemble_lda                     ; $9e LDA
	.word	Assemble_ldx                     ; $9f LDX
	.word	Assemble_ldy                     ; $a0 LDY
	.word	Assemble_lsr                     ; $a1 LSR
	.word	Assemble_nop                     ; $a2 NOP
	.word	Assemble_ora                     ; $a3 ORA
	.word	Assemble_pha                     ; $a4 PHA
	.word	Assemble_php                     ; $a5 PHP
	.word	Assemble_phx                     ; $a6 PHX
	.word	Assemble_phy                     ; $a7 PHY
	.word	Assemble_pla                     ; $a8 PLA
	.word	Assemble_plp                     ; $a9 PLP
	.word	Assemble_plx                     ; $aa PLX
	.word	Assemble_ply                     ; $ab PLY
	.word	Assemble_rol                     ; $ac ROL
	.word	Assemble_ror                     ; $ad ROR
	.word	Assemble_rti                     ; $ae RTI
	.word	Assemble_rts                     ; $af RTS
	.word	Assemble_sbc                     ; $b0 SBC
	.word	Assemble_sec                     ; $b1 SEC
	.word	Assemble_sed                     ; $b2 SED
	.word	Assemble_sei                     ; $b3 SEI
	.word	Assemble_sta                     ; $b4 STA
	.word	Assemble_stp                     ; $b5 STP
	.word	Assemble_stx                     ; $b6 STX
	.word	Assemble_sty                     ; $b7 STY
	.word	Assemble_stz                     ; $b8 STZ
	.word	Assemble_tax                     ; $b9 TAX
	.word	Assemble_tay                     ; $ba TAY
	.word	Assemble_trb                     ; $bb TRB
	.word	Assemble_tsb                     ; $bc TSB
	.word	Assemble_tsx                     ; $bd TSX
	.word	Assemble_txa                     ; $be TXA
	.word	Assemble_txs                     ; $bf TXS
	.word	Assemble_tya                     ; $c0 TYA
